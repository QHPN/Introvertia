// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String          @id
  username               String          @unique
  avatar                 String?
  cover                  String?
  name                   String?
  surname                String?
  birthDate              DateTime?       
  description            String?
  city                   String?
  school                 String?
  work                   String?
  website                String?
  role                   String          @default("user") // Có thể là "user", "moderator", "admin"
  createdAt              DateTime        @default(now())
  posts                  Post[]
  comments               Comment[]
  likes                  Like[]
  followers              Follower[]      @relation("UserFollowers")
  followings             Follower[]      @relation("UserFollowings")
  followRequestsSent     FollowRequest[] @relation("FollowRequestsSent")
  followRequestsReceived FollowRequest[] @relation("FollowRequestsReceived")
  blocks                 Block[]         @relation("BlocksSent")
  blockedBy              Block[]         @relation("BlocksReceived")
  stories                Story[]
  notificationsReceived  Notification[]  @relation("NotificationsReceived")
  notificationsSent      Notification[]  @relation("NotificationsSent")
  chatParticipations     ChatParticipant[]
  sentMessages           Message[]
  // Thêm quan hệ với Report model
  submittedReports       Report[]        @relation("ReportSubmitter")
  reportedContent        Report[]        @relation("ReportedUser")
}

model Post {
  id        Int       @id @default(autoincrement())
  desc      String
  img       String?
  video     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  desc      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  likes     Like[]
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  parentId  Int?
  replies   Comment[] @relation("CommentReplies")
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int?
  Comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int?
}

model Follower {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
}

model FollowRequest {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  sender     User     @relation("FollowRequestsSent", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  receiver   User     @relation("FollowRequestsReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String

  @@unique([senderId, receiverId])
}

model Block {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  blocker   User     @relation("BlocksSent", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId String
  blocked   User     @relation("BlocksReceived", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId String

  @@unique([blockerId, blockedId])
}

model Story {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  expiresAt DateTime
  img       String?
  video     String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model Notification {
  id        Int      @id @default(autoincrement())
  type      String   // "LIKE", "COMMENT", "FOLLOW", "POST"
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Người nhận thông báo
  receiver  User     @relation("NotificationsReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String
  
  // Người tạo thông báo (người like, comment, follow, đăng bài)
  sender    User     @relation("NotificationsSent", fields: [senderId], references: [id], onDelete: Cascade)
  senderId  String
  
  // Liên kết đến đối tượng tương ứng
  postId    Int?     // ID của bài post liên quan (nếu là thông báo về post)
  commentId Int?     // ID của comment liên quan (nếu là thông báo về comment)
  
  // URL để redirect khi nhấp vào thông báo
  link      String?
}

model Chat {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  participants ChatParticipant[]
  messages     Message[]
}

model ChatParticipant {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    Int
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  @@unique([userId, chatId])
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  img     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId  String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    Int
}

// Thêm model cho hệ thống báo cáo
model Report {
  id          Int      @id @default(autoincrement())
  type        String   // "POST", "COMMENT", "USER"
  reason      String
  description String?
  status      String   @default("pending") // "pending", "resolved", "rejected"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Người tạo báo cáo
  submitter   User     @relation("ReportSubmitter", fields: [submitterId], references: [id], onDelete: Cascade)
  submitterId String

  // Người dùng bị báo cáo (nếu báo cáo liên quan đến người dùng)
  reportedUser User?    @relation("ReportedUser", fields: [reportedUserId], references: [id], onDelete: SetNull)
  reportedUserId String?

  // ID của nội dung bị báo cáo
  postId      Int?
  commentId   Int?
}